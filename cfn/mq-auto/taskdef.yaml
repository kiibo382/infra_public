---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  LaunchType:
    Type: String
    Default: EC2
    AllowedValues:
      - Fargate
      - EC2

  InstanceType:
    Type: String
    Default: t2.micro

  ClusterSize:
    Type: Number
    Default: 3

  Subnet1:
    Type: AWS::EC2::Subnet::Id

  Subnet2:
    Type: AWS::EC2::Subnet::Id

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  VpcId:
    Type: AWS::EC2::VPC::Id

Conditions:
  EC2: !Equals [!Ref LaunchType, "EC2"]

Mappings:
  AWSRegionToAMI:
    ap-south-1:
      AMI: ami-00491f6f
    eu-west-3:
      AMI: ami-9aef59e7
    eu-west-2:
      AMI: ami-67cbd003
    eu-west-1:
      AMI: ami-1d46df64
    ap-northeast-2:
      AMI: ami-c212b2ac
    ap-northeast-1:
      AMI: ami-872c4ae1
    sa-east-1:
      AMI: ami-af521fc3
    ca-central-1:
      AMI: ami-435bde27
    ap-southeast-1:
      AMI: ami-910d72ed
    ap-southeast-2:
      AMI: ami-58bb443a
    eu-central-1:
      AMI: ami-509a053f
    us-east-1:
      AMI: ami-28456852
    us-east-2:
      AMI: ami-ce1c36ab
    us-west-1:
      AMI: ami-74262414
    us-west-2:
      AMI: ami-decc7fa6

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "autoscaling:DescribeAutoScalingInstances"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "ec2:DescribeInstances"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EC2
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: "false"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: EC2
    Properties:
      VPCZoneIdentifier: [!Ref Subnet1, !Ref Subnet2]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 0
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 14

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref "AWS::StackName"
      Cluster: !Ref Cluster
      DesiredCount: 3
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kizawa-cfn-taskdef
      Volumes:
        - Host:
            SourcePath: /var/lib/rabbitmq-asg-autocluster
          Name: rabbitmq-database
      # important for rabbit node discovery as containers inherit the host's hostname that is in DNS
      NetworkMode: "host"
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: rabbit
          Image: arnaud:latest
          MountPoints:
            - SourceVolume: rabbitmq-database
              ContainerPath: /var/lib/rabbitmq
          Cpu: 512
          Memory: 256
          PortMappings:
            - HostPort: 5672
              ContainerPort: 5672
              Protocol: tcp
            - HostPort: 15672
              ContainerPort: 15672
              Protocol: tcp
            - HostPort: 4369
              ContainerPort: 4369
              Protocol: tcp
            - HostPort: 25672
              ContainerPort: 25672
              Protocol: tcp
          Environment:
            - Name: RABBITMQ_DEFAULT_VHOST
              Value: /
            - Name: RABBITMQ_DEFAULT_USER
              Value: guest
            - Name: RABBITMQ_DEFAULT_PASS
              Value: guest
            - Name: RABBITMQ_DEFAULT_PORT
              Value: 5672
            - Name: RABBITMQ_VM_MEMORY_HIGH_WATERMARK
              Value: 0.85
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: AWS_ASG_AUTOCLUSTER
              Value: "true"
            # using a random erlang cookie
            - Name: RABBITMQ_ERLANG_COOKIE
              Value: "ALWEDHDBZTQYWTJGTXWV"
            - Name: RABBITMQ_QUEUE_MASTER_LOCATOR
              Value: min-masters
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: rabbit
          ReadonlyRootFilesystem: "false"
          Privileged: "true"
          Ulimits:
            - Name: nofile
              SoftLimit: 10240
              HardLimit: 32768
