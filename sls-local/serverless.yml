service: ${env:SERVICE_NAME}

frameworkVersion: "2"
useDotenv: true

plugins:
  - serverless-offline
  - serverless-s3-local
  - serverless-deployment-bucket
  - serverless-apigw-binary
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE}
  region: ap-northeast-1
  profile: ccti-dev
  environment:
    DEPLOYMENT_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-deployment-bucket
    RECORDS_BUCKET_NAME1: ${self:service}-${opt:stage, self:provider.stage}-records-bucket1
    RECORDS_BUCKET_NAME2: ${self:service}-${opt:stage, self:provider.stage}-records-bucket2
    TRANSCRIBE_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-transcribe-bucket
    COMPREHEND_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-comprehend-bucket
    COMPLETE_SNS_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-complete-topic
  deploymentBucket:
    name: ${self:provider.environment.DEPLOYMENT_BUCKET_NAME}
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221
  logRetentionInDays: 30
  # logs:
  #   restApi:
  #     accessLogging: false
  #     executionLogging: true
  #     level: ERROR
  #     fullExecutionData: false
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.RECORDS_BUCKET_NAME1}/*"
            - "arn:aws:s3:::${self:provider.environment.RECORDS_BUCKET_NAME2}/*"
            - "arn:aws:s3:::${self:provider.environment.TRANSCRIBE_BUCKET_NAME}/*"
            - "arn:aws:s3:::${self:provider.environment.COMPREHEND_BUCKET_NAME}/*"
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
          Resource: "*"
        - Effect: Allow
          Action:
            - "comprehend:*"
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - "SNS:Publish"
          Resource:
            Fn::Join:
              - ":"
              - - "arn:aws:sns"
                - "Ref": "AWS::Region"
                - "Ref": "AWS::AccountId"
                - ${self:provider.environment.COMPLETE_SNS_TOPIC}

custom:
  apigwBinary:
    types:
      - "*/*"
  alerts:
    stages:
      - dev
    topics:
      alarm:
        topic: ${self:service}-${opt:stage, self:provider.stage}-alarm
        notifications:
          - protocol: ${env:SNS_PROTOCOL}
            endpoint: ${env:SNS_ENDPOINT}
    alarms:
      - functionErrors
      - functionThrottles

package:
  include:
    - src/*
  # exclude:
  #   - buckets
  #   - sample
  #   - __pycache__
  #   - "*.sh"
  #   - .git
  #   - .gitignore
  #   - node_modules
  #   - package.json
  #   - package-lock.json

functions:
  transcribe1:
    handler: src/transcribe.lambda_handler
    memorySize: 512
    events:
      - s3:
          bucket: ${self:provider.environment.RECORDS_BUCKET_NAME1}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .wav
  transcribe2:
    handler: src/transcribe.lambda_handler
    memorySize: 512
    events:
      - s3:
          bucket: ${self:provider.environment.RECORDS_BUCKET_NAME2}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .wav
  comprehend:
    handler: src/comprehend.lambda_handler
    memorySize: 512
    environment:
      SNS_TOPIC_ARN:
        Fn::Join:
          - ":"
          - - "arn:aws:sns"
            - "Ref": "AWS::Region"
            - "Ref": "AWS::AccountId"
            - ${self:provider.environment.COMPLETE_SNS_TOPIC}
    events:
      - s3:
          bucket: ${self:provider.environment.TRANSCRIBE_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: -transcribe.json
  results:
    handler: src/results.get
    memorySize: 512
    events:
      - http:
          path: /results/{records_bucket}/{proxy+}
          method: get
          request:
            parameters:
              paths:
                records_bucket: true
  records_get:
    handler: src/records.get
    memorySize: 512
    events:
      - http:
          path: records/{records_bucket}/{proxy+}
          method: get

resources:
  Resources:
    S3ComprehendBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.COMPREHEND_BUCKET_NAME}
    CompeleteSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.COMPLETE_SNS_TOPIC}
        Subscription:
          - Protocol: ${env:SNS_PROTOCOL}
            Endpoint: ${env:SNS_ENDPOINT}
