service: kizawa-sample

plugins:
  - serverless-offline
  - serverless-s3-local

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: ap-northeast-1
  profile: ccti-dev
  environment:
    RECORDS_BUCKET_NAME1: ${self:service}-${opt:stage, self:provider.stage}-records-bucket1
    RECORDS_BUCKET_NAME2: ${self:service}-${opt:stage, self:provider.stage}-records-bucket2
    TRANSCRIBE_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-transcribe-bucket
    COMPREHEND_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-comprehend-bucket
  logRetentionInDays: 30
  logs:
    restApi:
      accessLogging: false
      executionLogging: true
      level: INFO
      fullExecutionData: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:provider.environment.RECORDS_BUCKET_NAME1}/*"
        - "arn:aws:s3:::${self:provider.environment.RECORDS_BUCKET_NAME2}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:provider.environment.TRANSCRIBE_BUCKET_NAME}/*"
        - "arn:aws:s3:::${self:provider.environment.COMPREHEND_BUCKET_NAME}/*"
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "comprehend:*"
      Resource:
        - "*"
  apiGateway:
    binaryMediaTypes:
      - "*/*"
    shouldStartNameWithService: true
  s3:
    port: 4569
    directory: tmp

functions:
  transcribe1:
    handler: transcribe.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.RECORDS_BUCKET_NAME1}
          event: s3:ObjectCreated:*
          # existing: true
  transcribe2:
    handler: transcribe.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.RECORDS_BUCKET_NAME2}
          event: s3:ObjectCreated:*
          # existing: true
  comprehend:
    handler: comprehend.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.TRANSCRIBE_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: -transcribe.json
  results:
    handler: test_results.get
    events:
      - http:
          path: results/{path}
          method: get
  records_get:
    handler: test_records.get
    events:
      - http:
          path: records/{path}
          method: get
  records_post:
    handler: test_records.post
    events:
      - http:
          path: records
          method: post

resources:
  Resources:
    # S3AudioBucket1:
    #   Type: "AWS::S3::Bucket"
    #   Properties:
    #     BucketName: ${self:provider.environment.RECORDS_BUCKET_NAME1}
    # S3AudioBucket2:
    #   Type: "AWS::S3::Bucket"
    #   Properties:
    #     BucketName: ${self:provider.environment.RECORDS_BUCKET_NAME2}
    S3ComprehendBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.COMPREHEND_BUCKET_NAME}
