service: kizawa-sample

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: ap-northeast-1
  profile: ccti-dev
  environment:
    AUDIO_BUCKET_NAME1: ${self:service}-${opt:stage, self:provider.stage}-records-bucket1
    AUDIO_BUCKET_NAME2: ${self:service}-${opt:stage, self:provider.stage}-records-bucket2
    TRANSCRIBE_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-transcribe-bucket
    COMPREHEND_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-comprehend-bucket
  logRetentionInDays: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:provider.environment.AUDIO_BUCKET_NAME1}/*"
        - "arn:aws:s3:::${self:provider.environment.AUDIO_BUCKET_NAME2}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:provider.environment.TRANSCRIBE_BUCKET_NAME}/*"
        - "arn:aws:s3:::${self:provider.environment.COMPREHEND_BUCKET_NAME}/*"
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "comprehend:*"
      Resource:
        - "*"

functions:
  transcribe1:
    handler: transcribe.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.AUDIO_BUCKET_NAME1}
          event: s3:ObjectCreated:*
          existing: true
  transcribe2:
    handler: transcribe.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.AUDIO_BUCKET_NAME2}
          event: s3:ObjectCreated:*
          existing: true
  comprehend:
    handler: comprehend.lambda_handler
    events:
      - s3:
          bucket: ${self:provider.environment.TRANSCRIBE_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: -transcribe.json
  get:
    handler: handler.get
    events:
      - http:
          path: "{bucketname}/{key}"
          method: get

resources:
  Resources:
    S3AudioBucket1:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.AUDIO_BUCKET_NAME1}
    S3AudioBucket2:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.AUDIO_BUCKET_NAME2}
    S3ComprehendBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.COMPREHEND_BUCKET_NAME}
    S3IamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: S3AudioBucket1
      Properties:
        PolicyName: lambda-s3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.AUDIO_BUCKET_NAME1}/*
        Roles:
          - Ref: IamRoleLambdaExecution
